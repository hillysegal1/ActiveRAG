# vanilla_agent.py

import openai
import os
import time
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Get the OpenAI API key from the environment variable
openai.api_key = os.getenv('API_KEY')

class VanillaRAGAgent:
    def __init__(self, model='gpt-4o-mini-2024-07-18'):
        self.message = []
        self.model = model

    def send_vanilla_rag_message(self, retrieved_passages, question):
        """
        Send a message to OpenAI API to generate a response based on retrieved passages.
        """
        message = {
            'role': 'user',
            'content': f"Use the following passages to answer the question.\n\nPassages:\n{retrieved_passages}\n\nQuestion: {question}"
        }
        self.message.append(message)

        try:
            ans = openai.ChatCompletion.create(
                model=self.model,
                messages=self.message,
                temperature=0.2,
                n=1
            )
            self.parse_message(ans)
            return ans
        except Exception as e:
            print(e)
            time.sleep(20)
            ans = openai.ChatCompletion.create(
                model=self.model,
                messages=self.message,
                temperature=0.2,
                n=1
            )
            self.parse_message(ans)
            return ans

    def parse_message(self, completion):
        content = completion['choices'][0]['message']['content']
        role = completion['choices'][0]['message']['role']
        record = {'role': role, 'content': content}
        self.message.append(record)
        return record

    def get_output(self):
        """
        Get the latest output generated by the model.
        """
        # Check if there are any messages and retrieve the last content
        if len(self.message) == 0:
            raise ValueError("No messages found. Cannot get output.")
        return self.message[-1]['content']
