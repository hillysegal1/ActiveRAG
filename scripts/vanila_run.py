# run_vanila.py

import sys
import os
import json
import time
from argparse import ArgumentParser
from dotenv import load_dotenv
import openai
from tqdm import tqdm

# Ensure src_VanilaRAG is in the path
sys.path.append('/home/student/ActiveRAG/src_VanilaRAG')

# Load environment variables from .env file
load_dotenv()

# Set OpenAI API key from environment variable
openai.api_key = os.getenv('API_KEY')


class VanillaRAGAgent:
    def __init__(self, model='gpt-4o-mini-2024-07-18'):
        self.message = []
        self.model = model

    def send_vanilla_rag_message(self, retrieved_passages, question):
        """
        Send a message to OpenAI API to generate a response based on retrieved passages.
        """
        message = {
            'role': 'user',
            'content': f"Use the following passages to answer the question.\n\nPassages:\n{retrieved_passages}\n\nQuestion: {question}"
        }
        self.message.append(message)

        try:
            ans = openai.ChatCompletion.create(
                model=self.model,
                messages=self.message,
                temperature=0.2,
                n=1
            )
            self.parse_message(ans)
            return ans
        except Exception as e:
            print(e)
            time.sleep(20)
            ans = openai.ChatCompletion.create(
                model=self.model,
                messages=self.message,
                temperature=0.2,
                n=1
            )
            self.parse_message(ans)
            return ans

    def parse_message(self, completion):
        content = completion['choices'][0]['message']['content']
        role = completion['choices'][0]['message']['role']
        record = {'role': role, 'content': content}
        self.message.append(record)
        return record

    def get_output(self):
        """
        Get the latest output generated by the model.
        """
        if len(self.message) == 0:
            raise ValueError("No messages found. Cannot get output.")
        return self.message[-1]['content']


class VanillaRAGPlan:
    def __init__(self, agent: VanillaRAGAgent):
        self.agent = agent

    def create_vanilla_rag_plan(self, question: str, retrieved_passages: str):
        """
        Create a plan to execute VanillaRAG using the given agent, question, and passages.
        """
        self.agent.send_vanilla_rag_message(retrieved_passages, question)

    def execute(self):
        """
        Execute the plan.
        """
        print("Executing VanillaRAG plan...")
        # In the current plan, `execute()` does not re-send the message, the message is sent during plan creation.

    def get_result(self):
        """
        Get the result from the agent after executing the plan.
        """
        return self.agent.get_output()


def run_vanilla_rag_experiment(question: str, retrieved_passages: str):
    """
    Run the VanillaRAG experiment with the provided question and retrieved passages.
    """
    # Initialize the VanillaRAG agent
    vanilla_rag_agent = VanillaRAGAgent()

    # Set up the VanillaRAG plan
    vanilla_rag_plan = VanillaRAGPlan(vanilla_rag_agent)
    vanilla_rag_plan.create_vanilla_rag_plan(question, retrieved_passages)

    # Execute the plan
    vanilla_rag_plan.execute()

    # Get and print the result
    result = vanilla_rag_plan.get_result()
    print(f"VanillaRAG Result: {result}")
    return result


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('--dataset', required=True)
    parser.add_argument('--topk', type=int, required=True)
    args = parser.parse_args()

    dataset = args.dataset
    filename = f'data/data_{dataset}_sampled.jsonl'
    topk = args.topk

    vanillarag_directory = f'vanila/{dataset}/top{topk}/vanillarag'

    # Create directory for logs if it doesn't exist
    if not os.path.exists(vanillarag_directory):
        os.makedirs(vanillarag_directory)

    with open(filename, 'r', encoding='utf-8') as file:
        for i, line in tqdm(enumerate(file)):
            try:
                data = json.loads(line)
                question = data['question']
                passages = "\n".join(data['passages'][:topk])

                # Run VanillaRAG Experiment
                vanillarag_result = run_vanilla_rag_experiment(question, passages)
                with open(f'{vanillarag_directory}/{dataset}_idx_{i}.json', 'w', encoding='utf-8') as vr_file:
                    json.dump({'question': question, 'vanilla_rag_result': vanillarag_result}, vr_file)

            except Exception as e:
                current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                print(f"Error at index {i} - {current_time}: {e}")
                traceback.print_exc()
                break
